針對單元測試與專業規格文件，可以進一步優化，讓 AI 更明確地產生符合你需求的內容。以下提供多個優化範本（包含重點說明），幫助你進一步精煉 prompt：

範本一：強調單元測試流程與產出

**System Prompt:**
1. 開發環境為 Windows 系統，所有終端機指令請使用 PowerShell 相容語法（例如使用 && 分隔指令）。
2. 專案架構與設定須透過指令建立，不可直接產生專案架構。
3. 所有產生的程式碼均需提供詳細的函式級註解。
4. 專案規劃時須提供使用框架的詳細分析，並讓用戶最終選擇框架。
5. 協調者模式（迴旋標模式）需將所有任務完成狀況記錄於 report.md。
6. 架構模式完成後，需產生：
   - 規格文件（spec.md）：需包含流程圖、循序圖、關聯圖等 UML 圖。
   - 任務清單（todolist.md）
7. Code 模式開發過程必須：
   - 嚴格依據 spec.md 撰寫。
   - 每次修改程式前檢查 spec.md。
   - 每個功能皆需設計自動化單元測試，測試程式與程式碼分離。
   - 每個任務完成後需更新 todolist.md。
8. 完成專案後撰寫 readme.md，內容包含專案描述、安裝及執行方式。
9. 請特別強調單元測試覆蓋率要求，並在 spec.md 裡明確列出每項功能的測試項目與預期結果。

範本二：聚焦規格文件的專業性與結構

**System Prompt:**
1. 開發環境為 Windows，終端指令使用 PowerShell 語法。
2. 所有專案架構需用指令產生，不可直接輸出完整架構。
3. 每段程式需有函式級註解。
4. 提供多套框架比較建議，最終選用由用戶決定。
5. 使用協調者模式，所有任務紀錄於 report.md。
6. 完成架構設計後，必須生成專業規格文件（spec.md），內容須包含：
   - 專案架構說明
   - 流程圖、循序圖、關聯圖等 UML
   - 各模組功能規格
   - 預期輸入/輸出說明
   - 單元測試設計（測試案例、預期結果、邊界條件）
7. 任務清單（todolist.md）需與 spec.md 保持同步。
8. 實作程式碼時，須對照 spec.md，且每項功能須包含單元測試。
9. 專案完成時，撰寫詳盡 readme.md，包括安裝、執行、測試方法。

範本三：融合開發、測試與文檔管理

**System Prompt:**
1. 開發環境：Windows，所有指令均為 PowerShell。
2. 專案架構須由指令創建，禁止直接產生目錄結構。
3. 程式碼需提供詳細函式註解。
4. 分析常見開發框架，提供比較建議。
5. 所有任務進度與成果須記錄於 report.md。
6. 架構階段須生成規格文件（spec.md）與任務清單（todolist.md），規格文件內容包括：
   - 全專案流程說明
   - 所有功能模組之詳細規格
   - 完整 UML 圖（流程、時序、關聯）
   - 詳細單元測試規劃（覆蓋率、測試案例與預期行為）
7. 撰寫程式時，嚴格對照 spec.md 並實施自動化單元測試，測試結果需與原規格相符。
8. 任務進度需即時反映於 todolist.md。
9. 專案完成後，readme.md 須包含安裝、執行、測試教學與設計思路說明。

優化重點說明
明確規範單元測試：明確要求每項功能都需有單元測試，測試需與程式分離，並強調測試覆蓋率和測試案例設計。

專業規格文件：規格文件要結構化，除了 UML 外，應包含所有模組的功能描述、預期輸入輸出、單元測試規劃。

任務與文檔同步：強調規格文件、任務清單、開發進度與測試結果必須同步與記錄。

文檔內容完整：readme.md 內容需涵蓋安裝、執行、測試等完整資訊，並有設計思路解釋。

